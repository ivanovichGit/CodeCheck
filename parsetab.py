
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAMPERSAND COMMA DIVIDE ELSE EQ EQUALS FLOAT GE GT ID IF INT LBRACE LE LPAREN LT MAIN MINUS NE NUMBER PLUS PRINTF RBRACE RPAREN SCANF SEMICOLON STRING TIMES WHILEprogram : INT MAIN LBRACE statements RBRACEstatements : statements statementstatements : statementstatement : type var_list SEMICOLONtype : INT\n            | FLOATvar_list : var_list COMMA IDvar_list : IDstatement : ID EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDstatement : PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLONstatement : SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLONstatement : IF LPAREN condition RPAREN LBRACE statements RBRACEstatement : IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEstatement : WHILE LPAREN condition RPAREN LBRACE statements RBRACEcondition : expression relop expressionrelop : GT\n             | LT\n             | GE\n             | LE\n             | EQ\n             | NE'
    
_lr_action_items = {'INT':([0,4,6,7,16,24,36,60,62,65,66,69,70,71,72,74,75,76,],[2,5,5,-3,-2,-4,-9,5,5,5,5,-19,-21,-17,-18,5,5,-20,]),'$end':([1,15,],[0,-1,]),'MAIN':([2,],[3,]),'LBRACE':([3,44,52,73,],[4,60,62,74,]),'ID':([4,5,6,7,8,14,16,19,22,23,24,25,28,36,37,38,39,40,45,46,47,48,49,50,51,58,59,60,62,65,66,69,70,71,72,74,75,76,],[9,-5,9,-3,18,-6,-2,26,26,26,-4,35,26,-9,26,26,26,26,26,-23,-24,-25,-26,-27,-28,63,64,9,9,9,9,-19,-21,-17,-18,9,9,-20,]),'PRINTF':([4,6,7,16,24,36,60,62,65,66,69,70,71,72,74,75,76,],[10,10,-3,-2,-4,-9,10,10,10,10,-19,-21,-17,-18,10,10,-20,]),'SCANF':([4,6,7,16,24,36,60,62,65,66,69,70,71,72,74,75,76,],[11,11,-3,-2,-4,-9,11,11,11,11,-19,-21,-17,-18,11,11,-20,]),'IF':([4,6,7,16,24,36,60,62,65,66,69,70,71,72,74,75,76,],[12,12,-3,-2,-4,-9,12,12,12,12,-19,-21,-17,-18,12,12,-20,]),'WHILE':([4,6,7,16,24,36,60,62,65,66,69,70,71,72,74,75,76,],[13,13,-3,-2,-4,-9,13,13,13,13,-19,-21,-17,-18,13,13,-20,]),'FLOAT':([4,6,7,16,24,36,60,62,65,66,69,70,71,72,74,75,76,],[14,14,-3,-2,-4,-9,14,14,14,14,-19,-21,-17,-18,14,14,-20,]),'RBRACE':([6,7,16,24,36,65,66,69,70,71,72,75,76,],[15,-3,-2,-4,-9,69,70,-19,-21,-17,-18,76,-20,]),'EQUALS':([9,],[19,]),'LPAREN':([10,11,12,13,19,22,23,28,37,38,39,40,45,46,47,48,49,50,51,],[20,21,22,23,28,28,28,28,28,28,28,28,28,-23,-24,-25,-26,-27,-28,]),'SEMICOLON':([17,18,26,27,29,35,53,54,55,56,57,67,68,],[24,-8,-16,36,-15,-7,-10,-11,-12,-13,-14,71,72,]),'COMMA':([17,18,30,31,35,],[25,-8,42,43,-7,]),'NUMBER':([19,22,23,28,37,38,39,40,45,46,47,48,49,50,51,],[29,29,29,29,29,29,29,29,29,-23,-24,-25,-26,-27,-28,]),'STRING':([20,21,],[30,31,]),'PLUS':([26,27,29,33,41,53,54,55,56,57,61,],[-16,37,-15,37,37,-10,-11,-12,-13,-14,37,]),'MINUS':([26,27,29,33,41,53,54,55,56,57,61,],[-16,38,-15,38,38,-10,-11,-12,-13,-14,38,]),'TIMES':([26,27,29,33,41,53,54,55,56,57,61,],[-16,39,-15,39,39,39,39,-12,-13,-14,39,]),'DIVIDE':([26,27,29,33,41,53,54,55,56,57,61,],[-16,40,-15,40,40,40,40,-12,-13,-14,40,]),'GT':([26,29,33,53,54,55,56,57,],[-16,-15,46,-10,-11,-12,-13,-14,]),'LT':([26,29,33,53,54,55,56,57,],[-16,-15,47,-10,-11,-12,-13,-14,]),'GE':([26,29,33,53,54,55,56,57,],[-16,-15,48,-10,-11,-12,-13,-14,]),'LE':([26,29,33,53,54,55,56,57,],[-16,-15,49,-10,-11,-12,-13,-14,]),'EQ':([26,29,33,53,54,55,56,57,],[-16,-15,50,-10,-11,-12,-13,-14,]),'NE':([26,29,33,53,54,55,56,57,],[-16,-15,51,-10,-11,-12,-13,-14,]),'RPAREN':([26,29,32,34,41,53,54,55,56,57,61,63,64,],[-16,-15,44,52,57,-10,-11,-12,-13,-14,-22,67,68,]),'AMPERSAND':([42,43,],[58,59,]),'ELSE':([69,],[73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([4,60,62,74,],[6,65,66,75,]),'statement':([4,6,60,62,65,66,74,75,],[7,16,7,7,16,16,7,16,]),'type':([4,6,60,62,65,66,74,75,],[8,8,8,8,8,8,8,8,]),'var_list':([8,],[17,]),'expression':([19,22,23,28,37,38,39,40,45,],[27,33,33,41,53,54,55,56,61,]),'condition':([22,23,],[32,34,]),'relop':([33,],[45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> INT MAIN LBRACE statements RBRACE','program',5,'p_program','cc_parser.py',12),
  ('statements -> statements statement','statements',2,'p_statements_multiple','cc_parser.py',16),
  ('statements -> statement','statements',1,'p_statements_single','cc_parser.py',20),
  ('statement -> type var_list SEMICOLON','statement',3,'p_statement_declaration','cc_parser.py',24),
  ('type -> INT','type',1,'p_type','cc_parser.py',28),
  ('type -> FLOAT','type',1,'p_type','cc_parser.py',29),
  ('var_list -> var_list COMMA ID','var_list',3,'p_var_list_multiple','cc_parser.py',33),
  ('var_list -> ID','var_list',1,'p_var_list_single','cc_parser.py',37),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','cc_parser.py',41),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','cc_parser.py',45),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','cc_parser.py',46),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','cc_parser.py',47),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','cc_parser.py',48),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','cc_parser.py',52),
  ('expression -> NUMBER','expression',1,'p_expression_number','cc_parser.py',56),
  ('expression -> ID','expression',1,'p_expression_id','cc_parser.py',60),
  ('statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON','statement',8,'p_statement_printf','cc_parser.py',64),
  ('statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON','statement',8,'p_statement_scanf','cc_parser.py',68),
  ('statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if','cc_parser.py',72),
  ('statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',11,'p_statement_if_else','cc_parser.py',76),
  ('statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE','statement',7,'p_statement_while','cc_parser.py',80),
  ('condition -> expression relop expression','condition',3,'p_condition','cc_parser.py',84),
  ('relop -> GT','relop',1,'p_relop','cc_parser.py',88),
  ('relop -> LT','relop',1,'p_relop','cc_parser.py',89),
  ('relop -> GE','relop',1,'p_relop','cc_parser.py',90),
  ('relop -> LE','relop',1,'p_relop','cc_parser.py',91),
  ('relop -> EQ','relop',1,'p_relop','cc_parser.py',92),
  ('relop -> NE','relop',1,'p_relop','cc_parser.py',93),
]
