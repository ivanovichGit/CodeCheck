Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> INT MAIN LBRACE statements RBRACE
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> type var_list SEMICOLON
Rule 5     type -> INT
Rule 6     type -> FLOAT
Rule 7     var_list -> var_list COMMA ID
Rule 8     var_list -> ID
Rule 9     statement -> ID EQUALS expression SEMICOLON
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression MINUS expression
Rule 12    expression -> expression TIMES expression
Rule 13    expression -> expression DIVIDE expression
Rule 14    expression -> LPAREN expression RPAREN
Rule 15    expression -> NUMBER
Rule 16    expression -> ID
Rule 17    statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 18    statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 19    statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 20    statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 21    statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 22    condition -> expression relop expression
Rule 23    relop -> GT
Rule 24    relop -> LT
Rule 25    relop -> GE
Rule 26    relop -> LE
Rule 27    relop -> EQ
Rule 28    relop -> NE

Terminals, with rules where they appear

AMPERSAND            : 17 18
COMMA                : 7 17 18
DIVIDE               : 13
ELSE                 : 20
EQ                   : 27
EQUALS               : 9
FLOAT                : 6
GE                   : 25
GT                   : 23
ID                   : 7 8 9 16 17 18
IF                   : 19 20
INT                  : 1 5
LBRACE               : 1 19 20 20 21
LE                   : 26
LPAREN               : 14 17 18 19 20 21
LT                   : 24
MAIN                 : 1
MINUS                : 11
NE                   : 28
NUMBER               : 15
PLUS                 : 10
PRINTF               : 17
RBRACE               : 1 19 20 20 21
RPAREN               : 14 17 18 19 20 21
SCANF                : 18
SEMICOLON            : 4 9 17 18
STRING               : 17 18
TIMES                : 12
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

condition            : 19 20 21
expression           : 9 10 10 11 11 12 12 13 13 14 22 22
program              : 0
relop                : 22
statement            : 2 3
statements           : 1 2 19 20 20 21
type                 : 4
var_list             : 4 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INT MAIN LBRACE statements RBRACE

    INT             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> INT . MAIN LBRACE statements RBRACE

    MAIN            shift and go to state 3


state 3

    (1) program -> INT MAIN . LBRACE statements RBRACE

    LBRACE          shift and go to state 4


state 4

    (1) program -> INT MAIN LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statements                     shift and go to state 6
    statement                      shift and go to state 7
    type                           shift and go to state 8

state 5

    (5) type -> INT .

    ID              reduce using rule 5 (type -> INT .)


state 6

    (1) program -> INT MAIN LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    RBRACE          shift and go to state 15
    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statement                      shift and go to state 16
    type                           shift and go to state 8

state 7

    (3) statements -> statement .

    RBRACE          reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    PRINTF          reduce using rule 3 (statements -> statement .)
    SCANF           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    FLOAT           reduce using rule 3 (statements -> statement .)


state 8

    (4) statement -> type . var_list SEMICOLON
    (7) var_list -> . var_list COMMA ID
    (8) var_list -> . ID

    ID              shift and go to state 18

    var_list                       shift and go to state 17

state 9

    (9) statement -> ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 19


state 10

    (17) statement -> PRINTF . LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 20


state 11

    (18) statement -> SCANF . LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 21


state 12

    (19) statement -> IF . LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> IF . LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LPAREN          shift and go to state 22


state 13

    (21) statement -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 23


state 14

    (6) type -> FLOAT .

    ID              reduce using rule 6 (type -> FLOAT .)


state 15

    (1) program -> INT MAIN LBRACE statements RBRACE .

    $end            reduce using rule 1 (program -> INT MAIN LBRACE statements RBRACE .)


state 16

    (2) statements -> statements statement .

    RBRACE          reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    PRINTF          reduce using rule 2 (statements -> statements statement .)
    SCANF           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)


state 17

    (4) statement -> type var_list . SEMICOLON
    (7) var_list -> var_list . COMMA ID

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 25


state 18

    (8) var_list -> ID .

    SEMICOLON       reduce using rule 8 (var_list -> ID .)
    COMMA           reduce using rule 8 (var_list -> ID .)


state 19

    (9) statement -> ID EQUALS . expression SEMICOLON
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 27

state 20

    (17) statement -> PRINTF LPAREN . STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    STRING          shift and go to state 30


state 21

    (18) statement -> SCANF LPAREN . STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    STRING          shift and go to state 31


state 22

    (19) statement -> IF LPAREN . condition RPAREN LBRACE statements RBRACE
    (20) statement -> IF LPAREN . condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (22) condition -> . expression relop expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    condition                      shift and go to state 32
    expression                     shift and go to state 33

state 23

    (21) statement -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (22) condition -> . expression relop expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    condition                      shift and go to state 34
    expression                     shift and go to state 33

state 24

    (4) statement -> type var_list SEMICOLON .

    RBRACE          reduce using rule 4 (statement -> type var_list SEMICOLON .)
    ID              reduce using rule 4 (statement -> type var_list SEMICOLON .)
    PRINTF          reduce using rule 4 (statement -> type var_list SEMICOLON .)
    SCANF           reduce using rule 4 (statement -> type var_list SEMICOLON .)
    IF              reduce using rule 4 (statement -> type var_list SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> type var_list SEMICOLON .)
    INT             reduce using rule 4 (statement -> type var_list SEMICOLON .)
    FLOAT           reduce using rule 4 (statement -> type var_list SEMICOLON .)


state 25

    (7) var_list -> var_list COMMA . ID

    ID              shift and go to state 35


state 26

    (16) expression -> ID .

    SEMICOLON       reduce using rule 16 (expression -> ID .)
    PLUS            reduce using rule 16 (expression -> ID .)
    MINUS           reduce using rule 16 (expression -> ID .)
    TIMES           reduce using rule 16 (expression -> ID .)
    DIVIDE          reduce using rule 16 (expression -> ID .)
    GT              reduce using rule 16 (expression -> ID .)
    LT              reduce using rule 16 (expression -> ID .)
    GE              reduce using rule 16 (expression -> ID .)
    LE              reduce using rule 16 (expression -> ID .)
    EQ              reduce using rule 16 (expression -> ID .)
    NE              reduce using rule 16 (expression -> ID .)
    RPAREN          reduce using rule 16 (expression -> ID .)


state 27

    (9) statement -> ID EQUALS expression . SEMICOLON
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 28

    (14) expression -> LPAREN . expression RPAREN
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 41

state 29

    (15) expression -> NUMBER .

    SEMICOLON       reduce using rule 15 (expression -> NUMBER .)
    PLUS            reduce using rule 15 (expression -> NUMBER .)
    MINUS           reduce using rule 15 (expression -> NUMBER .)
    TIMES           reduce using rule 15 (expression -> NUMBER .)
    DIVIDE          reduce using rule 15 (expression -> NUMBER .)
    GT              reduce using rule 15 (expression -> NUMBER .)
    LT              reduce using rule 15 (expression -> NUMBER .)
    GE              reduce using rule 15 (expression -> NUMBER .)
    LE              reduce using rule 15 (expression -> NUMBER .)
    EQ              reduce using rule 15 (expression -> NUMBER .)
    NE              reduce using rule 15 (expression -> NUMBER .)
    RPAREN          reduce using rule 15 (expression -> NUMBER .)


state 30

    (17) statement -> PRINTF LPAREN STRING . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 42


state 31

    (18) statement -> SCANF LPAREN STRING . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 43


state 32

    (19) statement -> IF LPAREN condition . RPAREN LBRACE statements RBRACE
    (20) statement -> IF LPAREN condition . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    RPAREN          shift and go to state 44


state 33

    (22) condition -> expression . relop expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression
    (23) relop -> . GT
    (24) relop -> . LT
    (25) relop -> . GE
    (26) relop -> . LE
    (27) relop -> . EQ
    (28) relop -> . NE

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51

    relop                          shift and go to state 45

state 34

    (21) statement -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 52


state 35

    (7) var_list -> var_list COMMA ID .

    SEMICOLON       reduce using rule 7 (var_list -> var_list COMMA ID .)
    COMMA           reduce using rule 7 (var_list -> var_list COMMA ID .)


state 36

    (9) statement -> ID EQUALS expression SEMICOLON .

    RBRACE          reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    ID              reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    PRINTF          reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    SCANF           reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    INT             reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 9 (statement -> ID EQUALS expression SEMICOLON .)


state 37

    (10) expression -> expression PLUS . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 53

state 38

    (11) expression -> expression MINUS . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 54

state 39

    (12) expression -> expression TIMES . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 55

state 40

    (13) expression -> expression DIVIDE . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 56

state 41

    (14) expression -> LPAREN expression . RPAREN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 42

    (17) statement -> PRINTF LPAREN STRING COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 58


state 43

    (18) statement -> SCANF LPAREN STRING COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 59


state 44

    (19) statement -> IF LPAREN condition RPAREN . LBRACE statements RBRACE
    (20) statement -> IF LPAREN condition RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LBRACE          shift and go to state 60


state 45

    (22) condition -> expression relop . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . NUMBER
    (16) expression -> . ID

    LPAREN          shift and go to state 28
    NUMBER          shift and go to state 29
    ID              shift and go to state 26

    expression                     shift and go to state 61

state 46

    (23) relop -> GT .

    LPAREN          reduce using rule 23 (relop -> GT .)
    NUMBER          reduce using rule 23 (relop -> GT .)
    ID              reduce using rule 23 (relop -> GT .)


state 47

    (24) relop -> LT .

    LPAREN          reduce using rule 24 (relop -> LT .)
    NUMBER          reduce using rule 24 (relop -> LT .)
    ID              reduce using rule 24 (relop -> LT .)


state 48

    (25) relop -> GE .

    LPAREN          reduce using rule 25 (relop -> GE .)
    NUMBER          reduce using rule 25 (relop -> GE .)
    ID              reduce using rule 25 (relop -> GE .)


state 49

    (26) relop -> LE .

    LPAREN          reduce using rule 26 (relop -> LE .)
    NUMBER          reduce using rule 26 (relop -> LE .)
    ID              reduce using rule 26 (relop -> LE .)


state 50

    (27) relop -> EQ .

    LPAREN          reduce using rule 27 (relop -> EQ .)
    NUMBER          reduce using rule 27 (relop -> EQ .)
    ID              reduce using rule 27 (relop -> EQ .)


state 51

    (28) relop -> NE .

    LPAREN          reduce using rule 28 (relop -> NE .)
    NUMBER          reduce using rule 28 (relop -> NE .)
    ID              reduce using rule 28 (relop -> NE .)


state 52

    (21) statement -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 62


state 53

    (10) expression -> expression PLUS expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 10 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 10 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 10 (expression -> expression PLUS expression .)
    GT              reduce using rule 10 (expression -> expression PLUS expression .)
    LT              reduce using rule 10 (expression -> expression PLUS expression .)
    GE              reduce using rule 10 (expression -> expression PLUS expression .)
    LE              reduce using rule 10 (expression -> expression PLUS expression .)
    EQ              reduce using rule 10 (expression -> expression PLUS expression .)
    NE              reduce using rule 10 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 10 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40

  ! TIMES           [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 54

    (11) expression -> expression MINUS expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 11 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 11 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 11 (expression -> expression MINUS expression .)
    GT              reduce using rule 11 (expression -> expression MINUS expression .)
    LT              reduce using rule 11 (expression -> expression MINUS expression .)
    GE              reduce using rule 11 (expression -> expression MINUS expression .)
    LE              reduce using rule 11 (expression -> expression MINUS expression .)
    EQ              reduce using rule 11 (expression -> expression MINUS expression .)
    NE              reduce using rule 11 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40

  ! TIMES           [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 55

    (12) expression -> expression TIMES expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 12 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 12 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 12 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 12 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 12 (expression -> expression TIMES expression .)
    GT              reduce using rule 12 (expression -> expression TIMES expression .)
    LT              reduce using rule 12 (expression -> expression TIMES expression .)
    GE              reduce using rule 12 (expression -> expression TIMES expression .)
    LE              reduce using rule 12 (expression -> expression TIMES expression .)
    EQ              reduce using rule 12 (expression -> expression TIMES expression .)
    NE              reduce using rule 12 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 12 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 56

    (13) expression -> expression DIVIDE expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 13 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 13 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 13 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 13 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 13 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 13 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 13 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 13 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 13 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 13 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 13 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 13 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 57

    (14) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (expression -> LPAREN expression RPAREN .)


state 58

    (17) statement -> PRINTF LPAREN STRING COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 63


state 59

    (18) statement -> SCANF LPAREN STRING COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 64


state 60

    (19) statement -> IF LPAREN condition RPAREN LBRACE . statements RBRACE
    (20) statement -> IF LPAREN condition RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statements                     shift and go to state 65
    statement                      shift and go to state 7
    type                           shift and go to state 8

state 61

    (22) condition -> expression relop expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 22 (condition -> expression relop expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 62

    (21) statement -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statements                     shift and go to state 66
    statement                      shift and go to state 7
    type                           shift and go to state 8

state 63

    (17) statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 67


state 64

    (18) statement -> SCANF LPAREN STRING COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 68


state 65

    (19) statement -> IF LPAREN condition RPAREN LBRACE statements . RBRACE
    (20) statement -> IF LPAREN condition RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE
    (2) statements -> statements . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    RBRACE          shift and go to state 69
    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statement                      shift and go to state 16
    type                           shift and go to state 8

state 66

    (21) statement -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    RBRACE          shift and go to state 70
    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statement                      shift and go to state 16
    type                           shift and go to state 8

state 67

    (17) statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 71


state 68

    (18) statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 72


state 69

    (19) statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .
    (20) statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE

    RBRACE          reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRINTF          reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    SCANF           reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 19 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 73


state 70

    (21) statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRINTF          reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    SCANF           reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 21 (statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 71

    (17) statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    PRINTF          reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    SCANF           reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    FLOAT           reduce using rule 17 (statement -> PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 72

    (18) statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    PRINTF          reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    SCANF           reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    FLOAT           reduce using rule 18 (statement -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 73

    (20) statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 74


state 74

    (20) statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statements                     shift and go to state 75
    statement                      shift and go to state 7
    type                           shift and go to state 8

state 75

    (20) statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . type var_list SEMICOLON
    (9) statement -> . ID EQUALS expression SEMICOLON
    (17) statement -> . PRINTF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (18) statement -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (19) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (20) statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT

    RBRACE          shift and go to state 76
    ID              shift and go to state 9
    PRINTF          shift and go to state 10
    SCANF           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 14

    statement                      shift and go to state 16
    type                           shift and go to state 8

state 76

    (20) statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    RBRACE          reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    ID              reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    PRINTF          reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    SCANF           reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    INT             reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FLOAT           reduce using rule 20 (statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)

